{"version":3,"sources":["helpers/SoundBoard.js","App.js","serviceWorker.js","index.js"],"names":["files","JeopardyCard","props","category","question","answer","value","airDate","showAnswer","className","style","toUpperCase","App","state","useState","clue","setClue","guess","setGuess","message","setMessage","gameState","setGameState","cluesAnswered","setCluesAnswered","soundBoard","speechSynthesisModule","speechSynthesis","audios","Object","keys","forEach","soundName","Audio","playSound","currentTime","play","playSpeech","text","preferredVoice","getVoices","find","voice","name","msg","SpeechSynthesisUtterance","window","speak","SoundBoard","addClueAnswered","userAnswer","isCorrect","nextClue","length","fetch","then","json","response","generatedClue","console","log","title","Date","airdate","getFullYear","handleGuess","isAnswerCorrect","toggleShowAnswer","handleCorrectOverride","newCluesAnswered","setLastClueAnsweredCorrectly","toLowerCase","startView","class","onClick","filter","reduce","total","clueAnswered","scope","map","index","autocomplete","onSubmit","e","preventDefault","disabled","onChange","event","target","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.44674f66.chunk.js","sourcesContent":["const files = {\n  'intro': '/assets/jeopardy-intro.mp3',\n  'right': '/assets/jeopardy-right.mp3',\n  'wrong': '/assets/jeopardy-wrong.mp3',\n  'board-fill': '/assets/jeopardy-board-fill.mp3',\n  'outro': '/assets/jeopardy-outro.mp3',\n}\n\nexport default function SoundBoard(speechSynthesisModule) {\n  const speechSynthesis = speechSynthesisModule;\n  let soundBoard = {};\n  let audios = {};\n\n  Object.keys(files).forEach(soundName => {\n    audios[soundName] = new Audio(files[soundName]);\n  });\n\n  soundBoard.playSound = (soundName) => {\n    audios[soundName].currentTime = 0;\n    audios[soundName].play();\n  }\n\n  soundBoard.playSpeech = (text) => {\n    const voiceOptions = speechSynthesis.getVoices();\n    const preferredVoice = voiceOptions.find(voice => voice.name === \"Microsoft Clara Online (Natural) - English (Canada)\");\n\n    let msg = new SpeechSynthesisUtterance(text);\n    msg.voice = preferredVoice;\n    window.speechSynthesis.speak(msg);\n  }\n\n  return soundBoard;\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport SoundBoard from './helpers/SoundBoard';\n\nfunction getClue() {\n  return fetch('https://jservice.io/api/random');\n}\n\nfunction JeopardyCard(props) {\n  const {\n    category,\n    question,\n    answer,\n    value,\n    airDate,\n    showAnswer\n  } = props;\n\n  return (\n    <div>\n      <div className=\"Jeopardy-box flex-box-column\" style={{\"height\": \"7em\"}}>\n        <div style={{\"font-size\": \"2em\", \"text-shadow\": \"2px 2px 0px black\", \"font-weight\": \"bold\"}}>{category.toUpperCase()} ({value})</div>\n        <div style={{\"font-size\": \"1em\", \"text-shadow\": \"2px 2px 0px black\", \"font-style\": \"italic\"}}>{`AIRED IN ${airDate}`}</div>\n      </div>\n      <div className=\"Jeopardy-box flex-box-column\" style={{\"height\": \"18em\", \"overflow-y\": \"auto\"}}>\n        <div style={{\"font-size\": \"2em\", \"padding\": \"0.5em\"}}>{showAnswer ? answer : question}</div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction App() {\n  const START = 0;\n  const QUESTION = 1;\n  const GUESSED = 2;\n  const SUMMARY = 3;\n\n  const [clue, setClue] = useState({\n    question: \"...\",\n    answer: \"...\",\n    category: \"...\",\n    value: \"\",\n    showAnswer: false,\n    airDate: \"...\"\n  });\n\n  const [guess, setGuess] = useState('');\n  const [message, setMessage] = useState('Welcome to Jeopardy! Here are your clues for today...');\n  const [gameState, setGameState] = useState(START);\n  const [cluesAnswered, setCluesAnswered] = useState([]);\n\n  const soundBoard = SoundBoard(window.speechSynthesis);\n\n  const addClueAnswered = (question, answer, category, value, userAnswer, isCorrect) => {\n    setCluesAnswered([...cluesAnswered, {\n      question,\n      answer,\n      category,\n      value,\n      userAnswer,\n      isCorrect\n    }]);\n  }\n\n  const setLastClueAnsweredCorrectly = () => {\n    const newCluesAnswered = cluesAnswered;\n    newCluesAnswered[cluesAnswered.length - 1]['isCorrect'] = true;\n    setCluesAnswered(newCluesAnswered);\n  }\n\n  const nextClue = () => {\n    setGuess(\"\");\n    if (cluesAnswered.length === 6) {\n      setGameState(SUMMARY);\n      return;\n    }\n\n    setGameState(QUESTION);\n    getClue().then((clue) => {\n      clue.json().then((response) => {\n        const generatedClue = response[0];\n        console.log(generatedClue);\n\n        if(!generatedClue.value) {\n          nextClue();\n          return;\n        }\n\n        setClue({\n          question: generatedClue.question,\n          answer: generatedClue.answer,\n          category: generatedClue.category.title,\n          value: generatedClue.value || 0,\n          showAnswer: false,\n          airDate: new Date(generatedClue.airdate).getFullYear()\n        })\n\n        soundBoard.playSpeech(`${generatedClue.category.title} for ${generatedClue.value}. ${generatedClue.question}`);\n        setMessage(`\"${generatedClue.category.title}\" for ${generatedClue.value}...`)\n      });\n    });\n  }\n\n  const initializeClue = () => {\n    nextClue();\n  }\n\n  const handleGuess = () => {\n    setGameState(GUESSED);\n    if (isAnswerCorrect()) {\n      soundBoard.playSound('right');\n      addClueAnswered(clue.question, clue.answer, clue.category, clue.value, guess, true);\n      setMessage(\"Right!\")\n    } else {\n      soundBoard.playSound('wrong');\n      addClueAnswered(clue.question, clue.answer, clue.category, clue.value, guess, false);\n      toggleShowAnswer();\n      setMessage(\"Wrong!\")\n    }\n  }\n\n  const handleCorrectOverride = () => {\n    if (!isAnswerCorrect()) {\n      soundBoard.playSound('right');\n      setMessage(\"Incorrectly marked as wrong... points added back to your score!\")\n      setLastClueAnsweredCorrectly();\n    }\n  }\n\n\n  const toggleShowAnswer = () => {\n    setClue({...clue, showAnswer: !clue.showAnswer})\n  }\n\n  const isAnswerCorrect = () => {\n    return guess.toLowerCase() === clue.answer.toLowerCase();\n  }\n\n\n  const gameView = () => {\n    return (\n        <div className=\"flex-box-column\">\n          <div>\n            <JeopardyCard value={clue.value} category={clue.category} question={clue.question} answer={clue.answer} airDate={clue.airDate} showAnswer={clue.showAnswer}/>\n          </div>\n          <div className='form-group form-inline mt-4' autocomplete=\"off\">\n            <form onSubmit={e => e.preventDefault()}>\n              <input autocomplete=\"off\" disabled={gameState === GUESSED} className='form-control' value={guess} onChange={(event) => {setGuess(event.target.value)}} type=\"text\" />\n              <button disabled={gameState === GUESSED} className='btn btn-primary mx-2' onClick={handleGuess}>Guess</button>\n              {\n                gameState === GUESSED &&\n                <button className='btn btn-success' type=\"button\" onClick={nextClue}>Next Clue</button>\n              }\n            </form>\n          </div>\n          <div>\n            <button className='btn btn-outline-danger btn-sm mr-2' type=\"button\" onClick={toggleShowAnswer}>\n              {\n                !clue.showAnswer ? \"Show Answer\" : \"Show Question\"\n              }\n            </button>\n            <span>\n              {gameState === QUESTION\n                ? <button className='btn btn-outline-warning btn-sm' type=\"button\" onClick={nextClue}>Skip Clue</button>\n                : <button onClick={handleCorrectOverride} className='btn btn-outline-secondary btn-sm' >I was right!</button>\n              }\n            </span>\n          </div>\n          <div>\n            <p className='mt-4 h4'>{message}</p>\n          </div>\n          <div>\n            <p className='mt-4 h4'>\n              { 'You have: ' }\n              { cluesAnswered.filter((clueAnswered) => clueAnswered.isCorrect).length }\n              { ' right, out of ' }\n              { cluesAnswered.length }\n              { ' answered.' }\n            </p>\n          </div>\n        </div>\n    );\n  }\n\n  const summaryView = () => {\n    return (\n      <div class=\"container flex-box-column\">\n        <p>Summary:</p>\n        <p>\n          { 'You answered '}\n          { cluesAnswered.filter((cluesAnswered) => cluesAnswered.isCorrect).length }\n          { ' correctly, out of today\\'s ' }\n          { cluesAnswered.length }\n          { ' clues' }\n        </p>\n        <p>\n          { 'On the show you would have made $' }\n          { cluesAnswered.reduce((total, clueAnswered) => (clueAnswered.isCorrect ? total + clueAnswered.value : total - clueAnswered.value), 0) }\n        </p>\n        <table class=\"table-dark table-bordered table-hover\">\n          <thead>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Question</th>\n              <th scope=\"col\">Answer</th>\n              <th scope=\"col\">Clue Value</th>\n            </tr>\n          </thead>\n          <tbody>\n          {cluesAnswered.map((clueAnswered, index) => (\n            <tr>\n              <th scope=\"row\">{index + 1}</th>\n              <td>{clueAnswered.question}</td>\n              <td>{clueAnswered.answer}</td>\n              <td>{clueAnswered.value}</td>\n            </tr>\n          ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  const startView = () => {\n    const start = () => {\n      setGameState(QUESTION);\n      initializeClue();\n    }\n\n    return(\n      <div class=\"container flex-box-column\">\n        <button className='btn btn-primary btn-lg m-4' onClick={start}>Play</button>\n      </div>\n    )\n  }\n\n  const routeView = (state) => {\n    if (state == START) {\n      return startView();\n    } else if (state == SUMMARY) {\n      return summaryView();\n    } else {\n      return gameView();\n    }\n  }\n\n  return (\n    <div className=\"App flex-box-column\" style={{\"background-color\": \"#00003A\", \"minHeight\": \"100%\"}}>\n      <div className=\"Jeopardy-title\">\n        Jeopardy\n      </div>\n      { routeView(gameState) }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}